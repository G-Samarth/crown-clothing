{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { ShopActionTypes } from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired.');\n  const collectionRef = firestore.collection('collections');\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/Samarth Ghulyani/Desktop/WebDev/React-folder/crown-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","firestore","collection","dispatch","fetchCollectionsStart","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AACA,SAAQC,eAAR,QAA8B,cAA9B;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,aAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACIC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AAEAJ,EAAAA,aAAa,CAACK,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAJ,IAAAA,QAAQ,CAACO,uBAAuB,CAACF,cAAD,CAAxB,CAAR;AACH,GAHD,EAGGG,KAHH,CAGSC,KAAK,IAAIT,QAAQ,CAACU,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAH1B;AAIP;AAED,OAAO,UAAUV,qBAAV,GAAiC;AACpC,QAAMT,SAAS,CACXC,eAAe,CAACmB,uBADL,EAEXlB,qBAFW,CAAf;AAIH","sourcesContent":["import {takeEvery} from 'redux-saga/effects';\r\nimport {ShopActionTypes} from './shop.types';\r\n\r\nexport function* fetchCollectionsAsync(){\r\n    yield console.log('I am fired.');\r\n\r\n    const collectionRef = firestore.collection('collections');\r\n        dispatch(fetchCollectionsStart());\r\n\r\n        collectionRef.get().then(snapshot => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n}\r\n\r\nexport function* fetchCollectionsStart(){\r\n    yield takeEvery(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START, \r\n        fetchCollectionsAsync\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}